---
import MapLayout from "../../../layouts/MapLayout.astro";
let maps = [
  {
    label: "Dengue 2016",
    url: "/astro_maps/divinopolis/map_dengue__2016",
  },
  {
    label: "Dengue 2016",
    url: "/astro_maps/divinopolis/scene_dengue_2016",
  },
];
---

<MapLayout title="" maps={maps}>
  <link
  rel="stylesheet"
  href="https://js.arcgis.com/4.19/esri/themes/light/main.css"
/>

<main class="flex max-md:flex-col">
  <div id="viewDiv" class="w-full h-[50vh] md:w-2/3 md:h-[90vh]"></div>
  <div class="w-full md:w-1/3 overflow-scroll" id="panel">
    <div class="p-2">
      <div
        class="flex justify-center items-center flex-wrap my-1 border border-secondary"
      >
        <canvas id="year-chart" height="250" width="300"></canvas>
      </div>
      <div
        class="flex items-center flex-wrap justify-center border border-secondary"
      >
        <canvas id="disposition-chart" width="150" height="200"></canvas>
      </div>
    </div>
  </div>
</main>

<script lang="js" nomodule="">
  // require([
  //   "esri/views/MapView",
  //   "esri/WebMap",
  //   "esri/widgets/Legend",
  //   "esri/widgets/Expand",
  //   "esri/widgets/Bookmarks",
  //   "esri/core/lang",
  //   "esri/core/promiseUtils",
  //   "esri/core/watchUtils"
  // ], function(MapView, WebMap, Legend, Expand, Bookmarks, lang, promiseUtils, watchUtils) {
  import MapView from "@arcgis/core/views/MapView.js";
  import WebMap from "@arcgis/core/WebMap.js";
  import Legend from "@arcgis/core/widgets/Legend.js";
  import Expand from "@arcgis/core/widgets/Expand.js";
  import Bookmarks from "@arcgis/core/widgets/Bookmarks.js";
  // import lang from "@arcgis/core/core/lang.js";
  import * as promiseUtils from "@arcgis/core/core/promiseUtils.js";
  // import watchUtils from "@arcgis/core/core/watchUtils.js";
  import * as reactiveUtils from "@arcgis/core/core/reactiveUtils.js";
  // declare chart variables to update as the under interacts with the sample
  import Chart from "chart.js/auto";

  let yearChart,
    ageChart,
    dispositionChart,
    genderChart,
    raceChart,
    totalcasos,
    avgAge,
    avgOpenTime,
    raioC,
    rcasos;

  // load a web map containing homicide statistics
  // from a portal item

  const webmap = new WebMap({
    portalItem: {
      id: "679e7bc6bab640c9afe89ece3c5a4348", //"20707169c14c40f680518710e7f58723"
    },
  });

  const view = new MapView({
    map: webmap,
    container: "viewDiv",
    highlightOptions: {
      color: "green",
      haloOpacity: 0.65,
      fillOpacity: 0.45,
    },
  });

  // Add UI elements to the view

  // Displays instructions to the user for understanding the sample
  // And places them in an Expand widget instance

  const titleContent = document.createElement("div");
  titleContent.style.padding = "15px";
  titleContent.style.backgroundColor = "white";
  titleContent.style.width = "500px";
  titleContent.innerHTML = [
    "<div id='title' class='esri-widget'>",
    "<br><strong>COVID em Divinopolis-MG: 2017</strong>",
    "<br><span class='text-red-600 font-bold text-2xl' id='num-casos'>0</span> casos notificados em um raio de <span id='lname'>1</span> km do ponto clicado.",
    "</div>",
  ].join(" ");

  const titleExpand = new Expand({
    expandIconClass: "esri-icon-dashboard",
    expandTooltip: "Summary stats",
    view: view,
    content: titleContent,
    expanded: view.widthBreakpoint !== "xsmall",
  });
  view.ui.add(titleExpand, "top-right");

  const legendExpand = new Expand({
    view: view,
    content: new Legend({
      view: view,
    }),
    expanded: view.widthBreakpoint !== "xsmall",
  });
  // view.ui.add(legendExpand, "bottom-left");

  view.watch("widthBreakpoint", function (newValue) {
    titleExpand.expanded = newValue !== "xsmall";
    legendExpand.expanded = newValue !== "xsmall";
  });
  //----------------------------------------------------------------
  const bookmarksWidget = new Bookmarks({
    view: view,
  });

  const bookmarksExpand = new Expand({
    view: view,
    content: bookmarksWidget,
  });
  // view.ui.add(bookmarksExpand, "top-right");

  bookmarksWidget.on("select-bookmark", function (event) {
    bookmarksExpand.expanded = false;
  });

  // Displays instructions to the user for understanding the sample
  // And places them in an Expand widget instance
  const sampleInstructions = document.createElement("div");
  sampleInstructions.style.padding = "10px";
  sampleInstructions.style.backgroundColor = "white";
  sampleInstructions.style.width = "300px";
  sampleInstructions.innerHTML = [
    "<b>Clique</b> sobre os dados para ver as estatÃ­sticas",
    "contidas a um raio (CONFIGURADO) do ponto clicado.",
  ].join(" ");

  const instructionsExpand = new Expand({
    expandIconClass: "esri-icon-question",
    expandTooltip: "How to use this sample",
    view: view,
    content: sampleInstructions,
  });
  view.ui.add(instructionsExpand, "top-right");

  let highlightHandle = null;

  /**
   * Create charts and start querying the layer view when
   * the view is ready and data begins to draw in the view
   */
  view.when().then(function () {
    // Create the charts when the view is ready
    createCharts();

    const layer = webmap.layers.getItemAt(0);
    layer.outFields = ["DATA_FORMAT", "CLASSIFICACAO_FINAL"];

    view.whenLayerView(layer).then(function (layerView) {
      // watchUtils.whenFalseOnce(layerView, "updating", function (val) {
      reactiveUtils
        .whenOnce(() => !layerView.updating)
        .then(() => {
          // Query layer view statistics as the user clicks
          // or drags the pointer across the view.
          view.on(["click", "drag"], function (event) {
            // disables navigation by pointer drag
            event.stopPropagation();
            queryStatsOnDrag(layerView, event)
              //   .then((e) => {
              //     console.log(e);
              //   })
              .then(updateCharts)

              .catch(function (error) {
                if (error.name !== "AbortError") {
                  console.error(error);
                }
              });
          });
        });
    });
  });

  /**
   * Queries statistics against the layer view at the given screen location
   */
  var queryStatsOnDrag = promiseUtils.debounce(function (layerView, event) {
    // create a query object for the highlight and the statistics query

    const query = layerView.layer.createQuery();
    query.geometry = view.toMap(event); // converts the screen point to a map point

    //  *****************  CONFIGURA RAIO
    //  var raioC = document.getElementById("lname").value;

    query.distance = 1; // queries all features within raioC KM of the point
    query.units = "kilometers";

    const statsQuery = query.clone();

    // Create the statistic definitions for querying stats from the layer view
    // the `onStatisticField` property can reference a field name or a SQL expression
    // `outStatisticFieldName` is the name of the statistic you will reference in the result
    // `statisticType` can be sum, avg, min, max, count, stddev

    let statDefinitions = [
      {
        onStatisticField: "1",
        outStatisticFieldName: "totalcasos",
        statisticType: "count",
      },
      {
        onStatisticField:"CASE WHEN CLASSIFICACAO_FINAL = 'Confirmado' THEN 1 ELSE 0 END",
        outStatisticFieldName: "casos_confirmados",
        statisticType: "sum"
      },
      {
        onStatisticField:"CASE WHEN CLASSIFICACAO_FINAL = 'Descartado' THEN 1 ELSE 0 END",
        outStatisticFieldName: "casos_descartados",
        statisticType: "sum"
      }
      //   {
      //     onStatisticField:
      //       "CASE WHEN EXTRACT(MONTH FROM DATA_FORMAT) = 1 THEN 1 ELSE 0 END",
      //     outStatisticFieldName: "jan",
      //     statisticType: "sum",
      //   },
    ];

    for (let month = 1; month <= 12; month++) {
      let statisticDefinition = {
        onStatisticField: `CASE WHEN EXTRACT(MONTH FROM DATA_FORMAT) = ${month} THEN 1 ELSE 0 END`,
        outStatisticFieldName: "mes_" + month,
        statisticType: "sum",
      };

      statDefinitions.push(statisticDefinition);
    }

    // add the stat definitions to the the statistics query object cloned earlier
    statsQuery.outStatistics = statDefinitions;

    // execute the query for all features in the layer view

    const allStatsResponse = layerView.queryFeatures(statsQuery).then(
      function (response) {
        const stats = response.features[0].attributes;
        return stats;
      },
      function (e) {
        console.error(e);
      }
    );

    const openStatsQuery = statsQuery.clone();

    // openStatsQuery.where = "confirmado = 'OBITO'";

    // execute the query for only unsolved homicides in the layer view
    const unsolvedStatsResponse = layerView.queryFeatures(openStatsQuery).then(
      function (response) {
        const stats = response.features[0].attributes;
        return stats;
      },
      function (e) {
        console.error(e);
      }
    );

    // highlight all features within the query distance
    layerView.queryObjectIds(query).then(function (ids) {
      if (highlightHandle) {
        highlightHandle.remove();
        highlightHandle = null;
      }
      highlightHandle = layerView.highlight(ids);
    });

    // Return the promises that will resolve to each set of statistics
    return promiseUtils.eachAlways([allStatsResponse, unsolvedStatsResponse]);
  });

  /**
   * Updates the charts with the data returned from the statistic queries.
   */
  function updateCharts(responses) {
    const allStats = responses[0].value;
    const unsolvedStats = responses[1].value;

    const yearChartStats = {
      solved: [
        allStats.mes_1,
        allStats.mes_2,
        allStats.mes_3,
        allStats.mes_4,
        allStats.mes_5,
        allStats.mes_6,
        allStats.mes_7,
        allStats.mes_8,
        allStats.mes_9,
        allStats.mes_10,
        allStats.mes_11,
        allStats.mes_12,
      ],
    };
    updateChart(yearChart, yearChartStats);

    const dispositionStats = [allStats.casos_confirmados, allStats.casos_descartados];
    updateChart(dispositionChart, dispositionStats);

    // Update the total numbers in the title UI element
    //  avgAge.innerHTML = Math.round(allStats.avg_age);
    totalcasos.innerHTML = allStats.totalcasos;
    rcasos.innerHTML = 1;

    // avgOpenTime.innerHTML = unsolvedStats.avg_open_time_years.toFixed(1);
  }

  /**
   * Updates the given chart with new data
   */
  function updateChart(chart, dataValues) {
    if (chart.config.type === "doughnut") {
      chart.data.datasets[0].data = dataValues;
    } else {
      chart.data.datasets[0].data = dataValues.solved;
      //   chart.data.datasets[1].data = dataValues.unsolved;
    }
    chart.update();
  }


  function createCharts() {
    totalcasos = document.getElementById("num-casos");
    rcasos = document.getElementById("lname");
    // avgAge = document.getElementById("avg-age");

    // avgOpenTime = document.getElementById("avg-open-time");

    const yearCanvas = document.getElementById("year-chart");

    yearChart = new Chart(yearCanvas.getContext("2d"), {
      type: "bar",
      data: {
        labels: [
          "jan",
          "fev",
          "mar",
          "abr",
          "mai",
          "jun",
          "jul",
          "ago",
          "set",
          "out",
          "nov",
          "dez",
        ],
        datasets: [
          {
            label: "Casos Notificados",
            backgroundColor: "#149dcf",
            stack: "Stack 0",
            data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          },
          //   {
          //     label: "Ãbitos",
          //     backgroundColor: "#ed5050",
          //     stack: "Stack 0",
          //     data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          //   },
        ],
      },
      options: {
        responsive: false,
        legend: {
          position: "top",
        },
        title: {
          display: true,
          text: "Casos por mÃªs/ano",
        },
        scales: {
        //   x: {
        //     ticks: {
        //       callback: function (value, index, ticks) {
        //         // console.log(ticks);
        //         return value;
        //       },
        //     },
        //   },
          yAxes: [
            {
              stacked: true,
              ticks: {
                beginAtZero: true,
              },
            },
          ],
        },
      },
    });

    const dispositionCanvas = document.getElementById("disposition-chart");
    dispositionChart = new Chart(dispositionCanvas.getContext("2d"), {
      type: "doughnut",
      title: "Casos",
      data: {
        labels: ["Casos Confirmados", "Casos Descartados"],
        datasets: [
          {
            backgroundColor: ["#149dcf", "#ed5050"],
            borderColor: "rgb(255, 255, 255)",
            borderWidth: 1,
            data: [0, 0],
          },
        ],
      },
      options: {
        responsive: false,
        cutoutPercentage: 35,
        legend: {
          position: "bottom",
        },
        title: {
          display: true,
          text: "Comorbidades",
        },
      },
    });
  }

  //  });
</script>

</MapLayout>
