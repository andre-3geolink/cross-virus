---
import MapLayout from "../../../layouts/MapLayout.astro";
let maps = [
  {
    label: "Covid 2020-201",
    url: "/astro_maps/joao_monlevade/map_covid_2020_2021",
  },
  {
    label: "Onibus",
    url: "/astro_maps/joao_monlevade/map_onibus",
  },
];
---

<MapLayout title="" maps={maps}>
  <style>
    /* main{
          height: 90vh;
        }
        */
    /* #viewDiv {
      position: absolute;
      padding: 0;
      margin: 0;
      height: 90vh;
      width: 100%;
    } */
  
    /* .esri-ui-top-right {
      max-height: 100%;
    } */
  
    #queryDiv,
     {
      min-width: 250px;
      font-size: 14px;
      padding: 10px;
      display: none;
      overflow-y: auto;
      overflow-x: hidden;
    }
  
  
    .geometry-button {
      flex: 1;
      border-style: solid;
      border-width: 1px;
      border-image: none;
    }
    .geometry-button-selected {
      background: #4c4c4c;
      color: #fff;
    }
  </style>
  
  <link
    rel="stylesheet"
    href="https://js.arcgis.com/4.20/esri/themes/light/main.css"
  />
  
  <main class="flex max-md:flex-col">
    <!-- <div id="viewDiv" class="h-[90vh] w-full"></div> -->
    <div id="viewDiv" class="w-full h-[50vh] md:w-2/3 md:h-[90vh]"></div>
  
    <div class="w-full md:w-1/3 overflow-scroll flex flex-col gap-2 m-1">
  
      <div id="queryDiv" class="esri-widget border border-secondary p-3">
        <b>Consulta por:</b><br />
        <div class="flex flex-row">
          <button
            class="esri-widget--button esri-icon-map-pin geometry-button"
            id="point-geometry-button"
            value="point"
            title="Query by point"></button>
          <button
            class="esri-widget--button esri-icon-polyline geometry-button"
            id="line-geometry-button"
            value="polyline"
            title="Query by line"></button>
          <button
            class="esri-widget--button esri-icon-polygon geometry-button"
            id="polygon-geometry-button"
            value="polygon"
            title="Query by polygon"></button>
        </div>
    
        <br />
        <div class="tooltip">
          <label for="bufferNum">Raio de alcance:</label>
          <div id="bufferNum" class="w-[90%] mt-10 mx-auto"></div>
        </div>
        <br />
        <button class="esri-button" id="clearGeometry" type="button">
          Limpar
        </button>
      </div>
    
      <div id="resultDiv" class=" border border-secondary flex flex-col  items-center p-3">
        <div class="count">
          Pontos selecionados:
          <div class="count whitespace-nowrap text-[14px] font-bold inline-block" id="count">0</div>
        </div>
    
        <div class="charts" class="">
          <div>
            <canvas id="year-chart" height="250" width="260"></canvas>
          </div>
          <div class="flex justify-center items-center">
            <canvas id="material-chart" width="150" height="200"></canvas>
          </div>
        </div>
      </div>
    
      <div id="resultDiv2" class="esri-widget border border-secondary min-h-56">
        <div class="charts">
            <canvas id="year-chart2" height="200" width="500"></canvas>
        </div>
      </div>
  
    </div>
  
  </main>
  
  <script nomodule="">
    // require([
    //   "esri/WebScene",
    //   "esri/views/SceneView",
    //   "esri/widgets/Legend",
    //   "esri/layers/GraphicsLayer",
    //   "esri/widgets/Sketch/SketchViewModel",
    //   "esri/widgets/Slider",
    //   "esri/geometry/geometryEngine",
    //   "esri/Graphic",
    //   "esri/widgets/Expand",
    //   "esri/core/promiseUtils",
    //   "esri/widgets/BasemapGallery",
    // ], function (
    //   WebScene,
    //   SceneView,
    //   Legend,
    //   GraphicsLayer,
    //   SketchViewModel,
    //   Slider,
    //   geometryEngine,
    //   Graphic,
    //   Expand,
    //   promiseUtils,
    //   BasemapGallery
    // ) {
    import WebScene from "@arcgis/core/WebScene.js";
    import SceneView from "@arcgis/core/views/SceneView.js";
    import Legend from "@arcgis/core/widgets/Legend.js";
    import GraphicsLayer from "@arcgis/core/layers/GraphicsLayer.js";
    import SketchViewModel from "@arcgis/core/widgets/Sketch/SketchViewModel.js";
    import Slider from "@arcgis/core/widgets/Slider.js";
    import * as geometryEngine from "@arcgis/core/geometry/geometryEngine.js";
    import Graphic from "@arcgis/core/Graphic.js";
    import Expand from "@arcgis/core/widgets/Expand.js";
    import * as promiseUtils from "@arcgis/core/core/promiseUtils.js";
    import BasemapGallery from "@arcgis/core/widgets/BasemapGallery.js";
    import Chart from "chart.js/auto";
    // Load webscene and display it in a SceneView
    const webscene = new WebScene({
      portalItem: {
        id: "a08e05ffc384476eb4a8f30ee8bf0ae8", //"00ca13f9e04548c1b2d4d0ea918d46de"
      },
    });
    // create the SceneView
    const view = new SceneView({
      container: "viewDiv",
      map: webscene,
    });
    window.view = view;
    // add a GraphicsLayer for the sketches and the buffer
    const sketchLayer = new GraphicsLayer();
    const bufferLayer = new GraphicsLayer();
    view.map.addMany([bufferLayer, sketchLayer]);
  
    let sceneLayer = null;
    let sceneLayerView = null;
    let bufferSize = 0;
  
    // Assign scene layer once webscene is loaded and initialize UI
    webscene.load().then(function () {
      sceneLayer = webscene.layers.find(function (layer) {
        return layer.title === "Covidfinal";
      });
      sceneLayer.outFields = ["SEXO", "IDADE", "MES", "ANO"];
  
      view.whenLayerView(sceneLayer).then(function (layerView) {
        sceneLayerView = layerView;
        queryDiv.style.display = "block";
      });
    });
  
    // create the legend
    const layerInfos = sceneLayer;
    const legend = new Expand({
      content: new Legend({
        view: view,
        layerInfos: layerInfos,
        style: "card", // other styles include 'classic'
      }),
      view: view,
      expanded: false,
    });
    const mapabase = new Expand({
      content: new BasemapGallery({
        view: view,
      }),
      view: view,
      expanded: false,
    });
  
    view.ui.add(mapabase, "top-left");
  
    view.ui.add(legend, "top-left");
  
    //  DESCOMENTAR PARA VOLTAR COM AS INFOS PARA O MEIO DO GRAFICO
    // view.ui.add([queryDiv], "top-right");
    // view.ui.add([resultDiv], "top-right");
    // view.ui.add([resultDiv2], "bottom-left");
  
    // use SketchViewModel to draw polygons that are used as a query
    let sketchGeometry = null;
    const sketchViewModel = new SketchViewModel({
      layer: sketchLayer,
      defaultUpdateOptions: {
        tool: "reshape",
        toggleToolOnClick: false,
      },
      view: view,
      defaultCreateOptions: { hasZ: false },
    });
  
    sketchViewModel.on("create", function (event) {
      if (event.state === "complete") {
        sketchGeometry = event.graphic.geometry;
        runQuery();
      }
    });
  
    sketchViewModel.on("update", function (event) {
      if (event.state === "complete") {
        sketchGeometry = event.graphics[0].geometry;
        runQuery();
      }
    });
    // draw geometry buttons - use the selected geometry to sktech
    document
      .getElementById("point-geometry-button")
      .addEventListener("click", geometryButtonsClickHandler);
    document
      .getElementById("line-geometry-button")
      .addEventListener("click", geometryButtonsClickHandler);
    document
      .getElementById("polygon-geometry-button")
      .addEventListener("click", geometryButtonsClickHandler);
    function geometryButtonsClickHandler(event) {
      const geometryType = event.target.value;
      clearGeometry();
      sketchViewModel.create(geometryType);
    }
  
    const bufferNumSlider = new Slider({
      container: "bufferNum",
      min: 0,
      max: 500,
      steps: 1,
      visibleElements: {
        labels: true,
      },
      precision: 0,
      labelFormatFunction: function (value, type) {
        return value.toString() + "m";
      },
      values: [0],
    });
    // get user entered values for buffer
    bufferNumSlider.on(["thumb-change", "thumb-drag"], bufferVariablesChanged);
    function bufferVariablesChanged(event) {
      bufferSize = event.value;
      runQuery();
    }
    // Clear the geometry and set the default renderer
    document
      .getElementById("clearGeometry")
      .addEventListener("click", clearGeometry);
  
    // Clear the geometry and set the default renderer
    function clearGeometry() {
      sketchGeometry = null;
      sketchViewModel.cancel();
      sketchLayer.removeAll();
      bufferLayer.removeAll();
      clearHighlighting();
      clearCharts();
      resultDiv.style.display = "none";
      resultDiv2.style.display = "none";
    }
  
    // set the geometry query on the visible SceneLayerView
    var debouncedRunQuery = promiseUtils.debounce(function () {
      if (!sketchGeometry) {
        return;
      }
  
      resultDiv.style.display = "flex";
      resultDiv2.style.display = "flex";
  
      updateBufferGraphic(bufferSize);
      return promiseUtils.eachAlways([queryStatistics(), updateSceneLayer()]);
    });
  
    function runQuery() {
      debouncedRunQuery().catch((error) => {
        if (error.name === "AbortError") {
          return;
        }
  
        console.error(error);
      });
    }
  
    // Set the renderer with objectIds
    var highlightHandle = null;
    function clearHighlighting() {
      if (highlightHandle) {
        highlightHandle.remove();
        highlightHandle = null;
      }
    }
  
    function highlightBuildings(objectIds) {
      // Remove any previous highlighting
      clearHighlighting();
      const objectIdField = sceneLayer.objectIdField;
      document.getElementById("count").innerHTML = objectIds.length;
  
      highlightHandle = sceneLayerView.highlight(objectIds);
    }
  
    // update the graphic with buffer
    function updateBufferGraphic(buffer) {
      // add a polygon graphic for the buffer
      if (buffer > 0) {
        var bufferGeometry = geometryEngine.geodesicBuffer(
          sketchGeometry,
          buffer,
          "meters"
        );
        if (bufferLayer.graphics.length === 0) {
          bufferLayer.add(
            new Graphic({
              geometry: bufferGeometry,
              symbol: sketchViewModel.polygonSymbol,
            })
          );
        } else {
          bufferLayer.graphics.getItemAt(0).geometry = bufferGeometry;
        }
      } else {
        bufferLayer.removeAll();
      }
    }
  
    function updateSceneLayer() {
      const query = sceneLayerView.createQuery();
      query.geometry = sketchGeometry;
      query.distance = bufferSize;
      return sceneLayerView.queryObjectIds(query).then(highlightBuildings);
    }
  
    var yearChart = null;
    var yearChart2 = null;
    var materialChart = null;
  
    function queryStatistics() {
      const statDefinitions = [
        {
          onStatisticField: "CASE WHEN sexo = 'M' THEN 1 ELSE 0 END",
          outStatisticFieldName: "masculino",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN sexo = 'F' THEN 1 ELSE 0 END",
          outStatisticFieldName: "feminino",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN idade LIKE  '%1 Ano%' THEN 1 ELSE 0 END",
          outStatisticFieldName: "menor1",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN idade LIKE  '%1 a 4%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "de_1_4_anos",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN idade LIKE  '%5 a 9%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "de_5_9_anos",
          statisticType: "sum",
        },
        {
          onStatisticField:
            "CASE WHEN idade LIKE  '%10 a 14%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "de_10_14_anos",
          statisticType: "sum",
        },
        {
          onStatisticField:
            "CASE WHEN idade LIKE  '%15 a 19%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "de_15_19_anos",
          statisticType: "sum",
        },
        {
          onStatisticField:
            "CASE WHEN idade LIKE  '%20 a 29%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "de_20_29_anos",
          statisticType: "sum",
        },
        {
          onStatisticField:
            "CASE WHEN idade LIKE  '%30 a 39%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "de_30_39_anos",
          statisticType: "sum",
        },
        {
          onStatisticField:
            "CASE WHEN idade LIKE  '%40 a 49%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "de_40_49_anos",
          statisticType: "sum",
        },
        {
          onStatisticField:
            "CASE WHEN idade LIKE  '%50 a 59%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "de_50_59_anos",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN idade LIKE  '%doso%'  THEN 1 ELSE 0 END",
          outStatisticFieldName: "idosos",
          statisticType: "sum",
        },
        // total POR MES-ANO
        //
        // Since separate fields don't exist for each year, we can use
        // an expression to return a 1 or a 0 for each year and sum up the
        // results to get the total.
  
        {
          onStatisticField: "CASE WHEN mes = 1 AND ano = 2021 THEN 1 ELSE 0 END",
          outStatisticFieldName: "jan_2021",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN mes = 2 AND ano = 2021 THEN 1 ELSE 0 END",
          outStatisticFieldName: "fev_2021",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN mes = 3 AND ano = 2021 THEN 1 ELSE 0 END",
          outStatisticFieldName: "mar_2021",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN mes = 4 AND ano = 2021 THEN 1 ELSE 0 END",
          outStatisticFieldName: "abr_2021",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN mes = 5 AND ano = 2021 THEN 1 ELSE 0 END",
          outStatisticFieldName: "mai_2021",
          statisticType: "sum",
        },
        {
          onStatisticField: "CASE WHEN mes = 6 AND ano = 2021 THEN 1 ELSE 0 END",
          outStatisticFieldName: "jun_2021",
          statisticType: "sum",
        },
      ];
      const query = sceneLayerView.createQuery();
      query.geometry = sketchGeometry;
      query.distance = bufferSize;
      query.outStatistics = statDefinitions;
  
      return sceneLayerView.queryFeatures(query).then(function (result) {
        const allStats = result.features[0].attributes;
        updateChart(materialChart, [allStats.masculino, allStats.feminino]);
        updateChart(yearChart, [
          allStats.menor1,
          allStats.de_1_4_anos,
          allStats.de_5_9_anos,
          allStats.de_10_14_anos,
          allStats.de_15_19_anos,
          allStats.de_20_29_anos,
          allStats.de_30_39_anos,
          allStats.de_40_49_anos,
          allStats.de_50_59_anos,
          allStats.idosos,
        ]);
        updateChart(yearChart2, [
          allStats.jan_2021,
          allStats.fev_2021,
          allStats.mar_2021,
          allStats.abr_2021,
          allStats.mai_2021,
          allStats.jun_2021,
        ]);
      }, console.error);
    }
  
    // Updates the given chart with new data
    function updateChart(chart, dataValues) {
      chart.data.datasets[0].data = dataValues;
      chart.update();
    }
  
    function createYearChart() {
      const yearCanvas = document.getElementById("year-chart");
  
      yearChart = new Chart(yearCanvas.getContext("2d"), {
        type: "bar",
        data: {
          labels: [
            "< 1 ano",
            "1-4 anos",
            "5-9 anos",
            "10-14 anos",
            "15-19 anos",
            "20-29 anos",
            "30-39 anos",
            "40-49 anos",
            "50-59 anos",
            "acima de 60 anos",
          ],
          datasets: [
            {
              label: "Faixa etária",
              backgroundColor: "#149dcf",
              stack: "Stack 0",
              data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            },
          ],
        },
        options: {
          responsive: false,
          legend: {
            display: false,
          },
          title: {
            display: true,
            text: "Faixa etária",
          },
          scales: {
            xAxes: [
              {
                stacked: true,
                ticks: {
                  beginAtZero: true,
                  precision: 0,
                },
              },
            ],
            yAxes: [
              {
                stacked: true,
              },
            ],
          },
        },
      });
    }
    function createMaterialChart() {
      const materialCanvas = document.getElementById("material-chart");
      materialChart = new Chart(materialCanvas.getContext("2d"), {
        type: "doughnut",
        data: {
          labels: ["Masculino", "Feminino"],
          datasets: [
            {
              backgroundColor: [
                "#FD7F6F",
                "#7EB0D5",
                "#B2E061",
                "#BD7EBE",
                "#FFB55A",
              ],
              borderWidth: 0,
              data: [0, 0],
            },
          ],
        },
        options: {
          responsive: false,
          cutoutPercentage: 35,
          legend: {
            position: "bottom",
          },
          title: {
            display: true,
            text: "Sexo",
          },
        },
      });
    }
  
    function createYearChart2() {
      const yearCanvas2 = document.getElementById("year-chart2");
  
      yearChart2 = new Chart(yearCanvas2.getContext("2d"), {
        type: "bar",
        data: {
          labels: ["jan-21", "fev-21", "mar-21", "abr-21", ",mai-21", "jun-21"],
          datasets: [
            {
              label: "Casos Notificados (2021)",
              backgroundColor: "#149dcf",
              stack: "Stack 0",
              data: [0, 0, 0, 0, 0, 0],
            },
          ],
        },
        options: {
          responsive: true,
          legend: {
            position: "top",
          },
          title: {
            display: true,
            text: "Casos por mês/ano",
          },
          scales: {
            xAxes: [
              {
                stacked: true,
              },
            ],
            yAxes: [
              {
                stacked: true,
                ticks: {
                  beginAtZero: true,
                },
              },
            ],
          },
        },
      });
    }
  
    function clearCharts() {
      updateChart(materialChart, [0, 0]);
      updateChart(yearChart, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
      updateChart(yearChart2, [0, 0, 0, 0, 0, 0]);
  
      document.getElementById("count").innerHTML = 0;
    }
  
    createYearChart();
    createYearChart2();
    createMaterialChart();
    // });
  </script>
  
</MapLayout>
